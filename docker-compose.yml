version: "3.8"
services:
  mongo:
    container_name: "${PROJECT_NAME}-mongo"
    image: mongo:4.0.20-xenial
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - default
  rabbitmq:
    container_name: "${PROJECT_NAME}-rabbitmq"
    image: "rabbitmq:3.8.9-management-alpine"
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    networks:
      - default
  server:
    container_name: "${PROJECT_NAME}-server"
    image: "rosetta/server"
    restart: on-failure
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SERVER_RABBITMQ_URL: ${SERVER_RABBITMQ_URL}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - default
  orchestrator:
    container_name: "${PROJECT_NAME}-orchestrator"
    image: "rosetta/orchestrator"
    restart: on-failure
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - postgres
      - rabbitmq
    networks:
      - default
  postgres:
    container_name: "${PROJECT_NAME}-postgres"
    image: postgres:12-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  webapp:
    container_name: "${PROJECT_NAME}-web"
    image: "rosetta/web"
    restart: unless-stopped
    build:
      context: ./webapp
      dockerfile: Dockerfile
    depends_on:
      - server
    ports:
      - "${WEBAPP_PORT}:80"
    networks:
      - default
  pyxel-01:
    container_name: "${PROJECT_NAME}-pyxel-01"
    image: "rosetta/pyxel"
    restart: on-failure
    build:
      context: ./pyxel
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - postgres
      - rabbitmq
      - server
    env_file: .env.pyxel-01
    environment:
      PYXEL_MONGO_URL: ${PYXEL_MONGO_URL}
      PYXEL_MONGO_DB: ${PYXEL_MONGO_DB}
      PYXEL_MONGO_BUCKET: ${PYXEL_MONGO_BUCKET}
      PYXEL_POSTGRES_URL: ${PYXEL_POSTGRES_URL}
      PYXEL_RABBITMQ_HOST: ${PYXEL_RABBITMQ_HOST}
      PYXEL_RABBITMQ_PORT: ${PYXEL_RABBITMQ_PORT}
      PYXEL_RABBITMQ_USER: ${PYXEL_RABBITMQ_USER}
      PYXEL_RABBITMQ_PASS: ${PYXEL_RABBITMQ_PASS}
      PYXEL_WORKER_ID: ${PYXEL_WORKER_ID}
    networks:
      - default
  pyxel-01:
    container_name: "${PROJECT_NAME}-pyxel-02"
    image: "rosetta/pyxel"
    restart: on-failure
    build:
      context: ./pyxel
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - postgres
      - rabbitmq
      - server
    env_file: .env.pyxel-02
    environment:
      PYXEL_MONGO_URL: ${PYXEL_MONGO_URL}
      PYXEL_MONGO_DB: ${PYXEL_MONGO_DB}
      PYXEL_MONGO_BUCKET: ${PYXEL_MONGO_BUCKET}
      PYXEL_POSTGRES_URL: ${PYXEL_POSTGRES_URL}
      PYXEL_RABBITMQ_HOST: ${PYXEL_RABBITMQ_HOST}
      PYXEL_RABBITMQ_PORT: ${PYXEL_RABBITMQ_PORT}
      PYXEL_RABBITMQ_USER: ${PYXEL_RABBITMQ_USER}
      PYXEL_RABBITMQ_PASS: ${PYXEL_RABBITMQ_PASS}
      PYXEL_WORKER_ID: ${PYXEL_WORKER_ID}
    networks:
      - default
networks:
  default:
    driver: bridge
volumes:
  mongo_data:
  postgres_data:
